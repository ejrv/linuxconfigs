## This file applies several new settings most distributions don't bundle into their sysctl.conf files, and is intended to overwrite any settings in it.
## Because there are large differences between distros' sysctl.conf files, some values may be redundant for your system.
## Depending on your use case, you may need to make adjustments - this is a good starting point for most people, but will not be beneficial for all systems.

## This prevents TCP TIME-WAIT assassination. It isn't typically default because it technically violates the TCP standard.
## In practise, this is stable and has no negative consequences.
## See also: https://tools.ietf.org/html/rfc1337
net.ipv4.tcp_rfc1337 = 1

## This is mainly beneficial for web servers. CloudFlare did a detailed blog post on exactly what this does.
## See also: https://blog.cloudflare.com/optimizing-the-linux-stack-for-mobile-web-per/
net.ipv4.tcp_slow_start_after_idle=0

## A lot of badly configured systems block ICMP, which does Very Bad Thingsâ„¢ for performance and reliability.
## This is an an attempt to work around that.
## See also: http://www.ietf.org/rfc/rfc4821.txt
## See also: https://blog.cloudflare.com/path-mtu-discovery-in-practice/
net.ipv4.tcp_mtu_probing=1
net.ipv4.tcp_base_mss=1024

## This vastly improves the performance of anything using BPF.
## Most systems will not benefit, but occasionally an application here or there will, and there's very little reason not to.
net.core.bpf_jit_enable=1

## By default, all but a handful of progressive distributions use CUBIC as their default TCP congestion control.
## BBR was introduced by Google and typically provides significant performance improvements over CUBIC.
## See also: https://queue.acm.org/detail.cfm?id=3022184
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr

## This shouldn't be disabled unless you *really* know what you're doing.
## At least one distribution disables in without knowing what they're doing.
## See also: https://en.wikipedia.org/wiki/SYN_cookies
net.ipv4.tcp_syncookies=1

## ASLR helps defeat certain types of buffer overflow attacks.
## While it can technically break programs, I've yet to ever see any program affected - it's very stable in practise.
## Many distributions default to this value now, but some still don't.
kernel.randomize_va_space=2

## Instead of just enabling client mode for TCP Fast Open, enable server mode as well.
## This depends on userspace support as well, but reduces latency if both client and server are properly set up
## Requires a fairly modern kernel.
net.ipv4.tcp_fastopen = 3





## -----------------------------------------------------------------------
## The below settings are useful hardening for shared environments with untrusted users
## They break several things: perf, Docker, various debugging tools, etc. They're therefore commented out by default.
## In a shared environment though, you'll *really* want these, as they prevent serious and commonly abused security issues.
## -----------------------------------------------------------------------

## Never expose kernel pointers
## kernel.kptr_restrict=2

## Avoid ToCToU race condition - very commonly abused to access other users' files in shared web hosting especially
## fs.protected_hardlinks = 1
## fs.protected_symlinks = 1

## Disable Magic SysRq key (we're presumably a server and thus shouldn't need it)
## kernel.sysrq = 0

## If our kernel has yama enabled, prevent ptrace from indiscriminately attaching to arbitrary running processes
## kernel.yama.ptrace_scope = 1

## Avoid leaking sensitive kernel syslog to unprivileged users
## kernel.dmesg_restrict = 1

## Disallow bpf programs and maps from being accessed from unprivileged process
## kernel.unprivileged_bpf_disabled=1

## Disallow all access to performance events by non-admin users
## kernel.perf_event_paranoid=3

## Turn off kexec
## kernel.kexec_load_disabled=0

## Debian/Ubuntu: disable non-privileged user namespaces
## kernel.unprivileged_userns_clone=0
